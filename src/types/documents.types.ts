// document.types.ts

// ===========================
// DOCUMENT WORKFLOW ENUMS
// ===========================

// Status of the uploaded document (for review/admin workflow)
export type DocumentStatus =
  | "pending"     // Submitted, waiting for review
  | "approved"    // Approved by admin/reviewer
  | "rejected"    // Rejected (e.g. incorrect, incomplete, invalid)
  | "revised"     // Needs revision; revision uploaded
  | "request";    // Additional info or document requested

// Document grouping/category
export type DocumentCategory =
  | "basic"           // Part of the standard requirements
  | "supplementary"   // Extra documents depending on study
  | "custom";         // User-added or ad-hoc docs

// ===========================
// DOCUMENT REQUIREMENTS (BLUEPRINT)
// ===========================

// Blueprint for a document requirement (used to show what needs to be uploaded)
export interface DocumentRequirement {
  id: string;               // Unique static id (e.g. "informed_consent" or a uuid for custom docs)
  title: string;            // User-facing document name
  description: string;      // What is required/expected for this document
  required: boolean;        // True if required for submission
  multiple?: boolean;       // Can user upload multiple files for this requirement?
  templateUrl?: string;     // Optional URL to a template/sample file (e.g. DOCX download)
  category: DocumentCategory; // "basic", "supplementary", or "custom"
}

// ===========================
// UPLOADED DOCUMENTS (ACTUAL FILES)
// ===========================

// Represents an actual uploaded file or set of files for a document requirement
export interface DocumentsType {
  id: string;                 // Unique document ID (generated by useDocumentIdGenerator)
  title: string;              // User-facing title (can override requirement for custom docs)
  description: string;        // Shown in admin/user UI for context
  uploadedAt: string;         // ISO timestamp string (when file was uploaded)
  fileType: string;           // MIME type (e.g. "application/pdf")
  storagePath: string;        // Firebase Storage path (where the file lives in storage)
  downloadUrl: string;        // Public download URL for the file
  category: DocumentCategory; // "basic", "supplementary", or "custom"
  status?: DocumentStatus;    // Current review status (pending/approved/rejected/etc.)
  remarks?: string;           // Reviewer/admin notes (optional)
  version: number;            // Increment if user uploads a new version of same doc
  custom?: boolean;           // True if user-added document (not from initial requirements)
  uploadedBy?: string;        // User ID of uploader (for audit trail)
  originalFileName?: string;  // Original filename before processing
  // If multiple files uploaded for a single requirement (e.g. multiple CVs)
  files?: {
    fileName: string;         // Name of the file
    fileType: string;         // MIME type
    size: number;             // Bytes
    storagePath: string;      // Firebase Storage path
    downloadUrl: string;      // Download URL
    uploadedAt: string;       // Timestamp for each file
  }[];
  // Temporary field to store File object during upload process
  _fileRef?: File;            // File object for upload (temporary, not saved to database)
}

// ===========================
// FILE MAP FOR FORMS/UPLOADERS
// ===========================

// Maps requirementId to one or more uploaded documents (useful for UI state management)
export type DocumentFileMap = {
  [requirementId: string]: DocumentsType | DocumentsType[];
};
